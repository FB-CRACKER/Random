#-------------------------------------##-------------------------------------#
# ENCRYPTED BY : RØBÎ ÁKØNDØ
# GITHUB : https://github.com/FB-CRACKER
#-------------------------------------##-------------------------------------#

import base64
exec(base64.b64decode(b''))